import json

import aiohttp
import requests
from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from bot.buttons.reply_buttons import main_menu_buttons
from bot.buttons.text import my_works
from bot.dispatcher import dp, bot
import os


@dp.message_handler(text=my_works)
async def show_my_orders(message: types.Message):
    chat_id = message.chat.id

    url = f'http://127.0.0.1:8005/api/orders/courier/orders/?chat_id={chat_id}'

    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            if response.status == 200:
                orders = await response.json()
                if orders['count'] > 0:
                    for order in orders['results']:
                        if order['status'] == 'pending':
                            status_text = "–û–∂–∏–¥–∞–µ—Ç"
                        elif order['status'] == 'in_progress':
                            status_text = "–í –ø—Ä–æ—Ü–µ—Å—Å–µ"
                        elif order['status'] == 'delivered':
                            status_text = "–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ"
                        elif order['status'] == 'cancelled':
                            status_text = "–û—Ç–º–µ–Ω–µ–Ω–æ"
                        else:
                            status_text = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

                        if order['payment_by'] == 'user':
                            payment_by_text = "–ü–ª–∞—Ç–µ–∂ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                        else:
                            payment_by_text = "–ü–ª–∞—Ç–µ–∂ –æ—Ç –∫—É—Ä—å–µ—Ä–æ–º"

                        if order['deliver_payment_by'] == 'user':
                            deliver_payment_by_text = "–ü–ª–∞—Ç–µ–∂ –∑–∞ –¥–æ—Å—Ç–∞–≤–∫—É –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                        else:
                            deliver_payment_by_text = "–ü–ª–∞—Ç–µ–∂ –∑–∞ –¥–æ—Å—Ç–∞–≤–∫—É –æ—Ç –∑–∞–∫–∞–∑—á–∏–∫–æ–º"

                        order_text = (
                            f"**–í–∞—à –∑–∞–∫–∞–∑ #{order['id']}**\n"
                            f"üìç *–û—Ç–∫—É–¥–∞:* {order['pickup_address']}\n"
                            f"üìç *–ö—É–¥–∞:* {order['delivery_address']}\n"
                            f"üõ§ *–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ:* {order['distance_km']} –∫–º\n"
                            f"üí∞ *–¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞:* {order['order_price']} —Å—É–º\n"
                            f"üöö *–¶–µ–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∏:* {order['delivery_price']} —Å—É–º\n"
                            f"üìù *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ —Å–±–æ—Ä—É:* {order['pickup_comment'] or '–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤'}\n"
                            f"üìù *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ –¥–æ—Å—Ç–∞–≤–∫–µ:* {order['delivery_comment'] or '–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤'}\n"
                            f"üì∏ *–§–æ—Ç–æ –∑–∞–∫–∞–∑–∞:*\n"
                            f"üó∫ *–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–∞—Ä—à—Ä—É—Ç:* [Google Maps]({order['map']})\n\n"
                            f"üìë *–°—Ç–∞—Ç—É—Å:* {status_text}\n"
                            f"üí≥ *–û–ø–ª–∞—Ç–∞ —Ç–æ–≤–∞—Ä–∞:* {payment_by_text}\n"
                            f"üí≥ *–û–ø–ª–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏:* {deliver_payment_by_text}\n\n"
                        )

                        base_dir = os.path.dirname(os.path.abspath(__file__))
                        photo_url = os.path.join(base_dir, 'images', order['image'][7:])
                        try:
                            with open(photo_url, 'rb') as photo_file:
                                await message.answer_photo(photo_file, caption=order_text, parse_mode="Markdown")
                        except FileNotFoundError:
                            await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order['id']}")

                else:
                    await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")
            else:
                await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤.")


@dp.callback_query_handler(lambda call: call.data.startswith("accept_order_"))
async def accept_order(call: types.CallbackQuery):
    order_id = call.data.split("_")[-1]

    try:
        response = requests.get(f"http://127.0.0.1:8005/api/orders/orders/{order_id}/")
        if response.status_code != 200:
            raise Exception("Buyurtma topilmadi.")

        order = response.json()

        if order['status'] == 'pending':
            accept_button = InlineKeyboardMarkup().add(
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f"cancel_courier_{order_id}"),
                InlineKeyboardButton("‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω", callback_data=f"done_courier_{order_id}")
            )

            await call.message.reply(
                f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç!\nüì¶ –°—Ç–∞—Ç—É—Å: –í –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–æ—Å—Ç–∞–≤–∫–∏.",
                reply_markup=accept_button
            )
            user_response = requests.get(f"http://127.0.0.1:8005/api/telegram-users/chat_id/{call.from_user.id}/")
            if user_response.status_code != 200:
                raise Exception("Kuryer topilmadi.")

            tg_user = user_response.json()

            s_data = {
                "status": "in_progress",
                "courier": tg_user['id']
            }

            new_order = json.loads(
                requests.patch(url=f"http://127.0.0.1:8005/api/orders/update/{order_id}/", json=s_data).content)
            user = json.loads(
                requests.get(url=f"http://127.0.0.1:8005/api/telegram-users/detail/{new_order['user']}").content)
            courier_name = tg_user.get('full_name', '–ë–µ–∑ –∏–º–µ–Ω–∏')
            courier_username = tg_user.get('username')
            courier_contact = f"@{courier_username}" if courier_username else "Username –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            await bot.send_message(
                chat_id=user['chat_id'],
                text=f"""üì¶ –í–∞—à –∑–∞–∫–∞–∑ –±—ã–ª –ø—Ä–∏–Ω—è—Ç!
                
üö∂ –ö—É—Ä—å–µ—Ä: {courier_name}
üîó –°–≤—è–∑–∞—Ç—å—Å—è: {courier_contact}
üì≤ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {tg_user['phone_number']}
‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –¥–æ—Å—Ç–∞–≤–∫—É. –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—Å!"""
            )
        else:
            await call.message.delete()
            await call.message.answer(
                "‚ùå –ó–∞–∫–∞–∑ —É–∂–µ –±—ã–ª –ø—Ä–∏–Ω—è—Ç –¥—Ä—É–≥–∏–º –∫—É—Ä—å–µ—Ä–æ–º –∏–ª–∏ –æ—Ç–º–µ–Ω—ë–Ω.",
                reply_markup=await main_menu_buttons(call.from_user.id)
            )

    except Exception as e:
        await call.message.answer(
            f"‚ö† Xatolik: {e}",
            reply_markup=await main_menu_buttons(call.from_user.id)
        )


@dp.callback_query_handler(lambda call: call.data.startswith("cancel_courier_"))
async def cancel_order(call: types.CallbackQuery):
    try:
        order_id = call.data.split("_")[-1]
        s_data = {
            "status": "pending",
            "courier": None
        }
        new_order = json.loads(
            requests.patch(url=f"http://127.0.0.1:8005/api/orders/update/{order_id}/", json=s_data).content)
        order_summary = (
            f"üìç *–û—Ç–∫—É–¥–∞:* {new_order['pickup_address']}\n"
            f"üìç *–ö—É–¥–∞:* {new_order['delivery_address']}\n"
            f"üõ§ *–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ:* {new_order['distance_km']} –∫–º\n"
            f"üí∞ *–¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞:* {new_order['order_price']} —Å—É–º\n"
            f"üöö *–¶–µ–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∏:* {new_order['delivery_price']} —Å—É–º\n"
            f"üí≥ *–û–ø–ª–∞—Ç–∞ —Ç–æ–≤–∞—Ä–∞:* {new_order['payment_by']}\n"
            f"üí≥ *–û–ø–ª–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏:* {new_order['deliver_payment_by']}\n"
            f"üìù *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–±–æ—Ä—É:* {new_order['pickup_comment']}\n"
            f"üìù *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –¥–æ—Å—Ç–∞–≤–∫–µ:* {new_order['delivery_comment']}\n"
            f"üì∏ *–§–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞:*\n\n"
            f"üó∫ *–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–∞—Ä—à—Ä—É—Ç:* [Google Maps]({new_order['map']})"
        )
        accept_button = InlineKeyboardMarkup().add(
            InlineKeyboardButton("‚úÖ  –ü—Ä–∏–Ω—è—Ç–∏–µ", callback_data=f"accept_order_{order_id}")
        )
        couriers = json.loads(
            requests.get(url=f"http://127.0.0.1:8005/api/telegram-users/couriers/").content)['results']
        base_dir = os.path.dirname(os.path.abspath(__file__))
        photo_url = os.path.join(base_dir, 'images', new_order['image'][7:])
        for courier in couriers:
            if courier['is_available']:
                try:
                    with open(photo_url, 'rb') as photo_file:
                        await bot.send_photo(chat_id=courier['chat_id'], photo=photo_file, caption=order_summary,
                                             parse_mode="Markdown",
                                             reply_markup=accept_button)
                except FileNotFoundError:
                    pass
        await call.message.delete()
        await call.message.answer("‚ùå –í–∞—à–∞ —Ä–∞–±–æ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞!",
                                  reply_markup=await main_menu_buttons(call.from_user.id))
    except Exception as e:
        await call.message.answer(f"‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞: {e}")


@dp.callback_query_handler(lambda call: call.data.startswith("done_courier_"))
async def mark_order_delivered(call: types.CallbackQuery):
    order_id = call.data.split("_")[-1]

    try:
        s_data = {
            "status": "delivered",
        }
        new_order = requests.patch(
            url=f"http://127.0.0.1:8005/api/orders/update/{order_id}/",
            json=s_data
        ).json()
        user = requests.get(
            url=f"http://127.0.0.1:8005/api/telegram-users/detail/{new_order['user']}"
        ).json()

        courier = requests.get(
            url=f"http://127.0.0.1:8005/api/telegram-users/detail/{new_order['courier']}"
        ).json()
        courier_name = courier.get('full_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        courier_username = courier.get('username')
        courier_contact = f"@{courier_username}" if courier_username else "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"

        await bot.send_message(
            chat_id=user['chat_id'],
            text=(
                f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ #{order_id} –±—ã–ª –¥–æ—Å—Ç–∞–≤–ª–µ–Ω!\n\n"
                f"üö∂ –ö—É—Ä—å–µ—Ä: {courier_name}\n"
                f"üîó –°–≤—è–∑–∞—Ç—å—Å—è: {courier_contact}\n"
                f"üì≤ –¢–µ–ª–µ—Ñ–æ–Ω: {courier.get('phone_number', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n\n"
                f"–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –Ω–∞—à–µ–π —Å–ª—É–∂–±–æ–π –¥–æ—Å—Ç–∞–≤–∫–∏! üôè"
            )
        )
        await call.message.delete()
        await call.message.answer(
            f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π.",
            reply_markup=await main_menu_buttons(call.from_user.id)
        )

    except Exception as e:
        await call.message.answer(
            f"‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}",
            reply_markup=await main_menu_buttons(call.from_user.id)
        )
