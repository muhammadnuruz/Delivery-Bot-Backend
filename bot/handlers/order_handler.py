import json
import os

import aiohttp
import requests
from geopy.distance import geodesic
from aiogram import types
from aiogram.types import ContentType, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from bot.buttons.reply_buttons import main_menu_buttons
from bot.buttons.text import order
from bot.dispatcher import dp, Config, bot
from aiogram.dispatcher.filters import Text

API_URL = "http://127.0.0.1:8005/api/orders/orders/"

SAVE_PATH = "images/order_images/"

os.makedirs(SAVE_PATH, exist_ok=True)


class OrderState(StatesGroup):
    pickup_location = State()
    delivery_location = State()
    product_price = State()
    delivery_price = State()
    delivery_payer = State()
    product_payer = State()
    product_photo = State()
    pickup_comment = State()
    delivery_comment = State()
    confirm = State()


cancel_button = KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")
skip_button = KeyboardButton("‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")


@dp.message_handler(Text(order))
async def start_order(msg: types.Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", request_location=True)], [cancel_button]],
        resize_keyboard=True
    )
    await msg.answer("üìç –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ A (–æ—Ç–∫—É–¥–∞ –∑–∞–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä)", reply_markup=keyboard)
    await OrderState.pickup_location.set()


@dp.message_handler(Text("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"), state='*')
async def cancel_order(msg: types.Message, state: FSMContext):
    await state.finish()
    await msg.answer("üö´ –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω.", reply_markup=await main_menu_buttons(msg.from_user.id))


@dp.message_handler(state=OrderState.pickup_location, content_types=ContentType.LOCATION)
async def set_pickup_location(msg: types.Message, state: FSMContext):
    await state.update_data(
        pickup_latitude=msg.location.latitude,
        pickup_longitude=msg.location.longitude
    )
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", request_location=True)], [cancel_button]],
        resize_keyboard=True
    )
    await msg.answer("üìç –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ B (–∫—É–¥–∞ –¥–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä)", reply_markup=keyboard)
    await OrderState.delivery_location.set()


@dp.message_handler(state=OrderState.delivery_location, content_types=ContentType.LOCATION)
async def set_delivery_location(msg: types.Message, state: FSMContext):
    await state.update_data(
        delivery_latitude=msg.location.latitude,
        delivery_longitude=msg.location.longitude
    )
    await msg.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ç–æ–≤–∞—Ä–∞", reply_markup=ReplyKeyboardMarkup(
        keyboard=[[cancel_button]], resize_keyboard=True
    ))
    await OrderState.product_price.set()


@dp.message_handler(state=OrderState.product_price, content_types=ContentType.TEXT)
async def set_product_price(msg: types.Message, state: FSMContext):
    await state.update_data(product_price=msg.text)
    await msg.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ—Å—Ç–∞–≤–∫–∏", reply_markup=ReplyKeyboardMarkup(
        keyboard=[[cancel_button]], resize_keyboard=True
    ))
    await OrderState.delivery_price.set()


@dp.message_handler(state=OrderState.delivery_price, content_types=ContentType.TEXT)
async def set_delivery_price(msg: types.Message, state: FSMContext):
    await state.update_data(delivery_price=msg.text)
    await msg.answer("üë§ –ö—Ç–æ –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç –¥–æ—Å—Ç–∞–≤–∫—É? (–ö–ª–∏–µ–Ω—Ç / –ó–∞–∫–∞–∑—á–∏–∫)", reply_markup=ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton("–ö–ª–∏–µ–Ω—Ç"), KeyboardButton("–ó–∞–∫–∞–∑—á–∏–∫")], [cancel_button]], resize_keyboard=True
    ))
    await OrderState.delivery_payer.set()


@dp.message_handler(state=OrderState.pickup_comment, content_types=ContentType.TEXT)
async def set_pickup_comment(msg: types.Message, state: FSMContext):
    if msg.text != "‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        await state.update_data(pickup_comment=msg.text)
    else:
        await state.update_data(pickup_comment="")

    keyboard = ReplyKeyboardMarkup(
        keyboard=[[skip_button], [cancel_button]], resize_keyboard=True
    )
    await msg.answer("‚úè –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Ç–æ—á–∫–µ B (–∫—É–¥–∞ –¥–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å.",
                     reply_markup=keyboard)
    await OrderState.delivery_comment.set()


@dp.message_handler(state=OrderState.delivery_comment, content_types=ContentType.TEXT)
async def set_delivery_comment(msg: types.Message, state: FSMContext):
    if msg.text != "‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        await state.update_data(delivery_comment=msg.text)
    else:
        await state.update_data(delivery_comment="")

    await msg.answer("üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞", reply_markup=ReplyKeyboardRemove())
    await OrderState.product_photo.set()


async def get_location_name(lat, lon):
    url = f"https://nominatim.openstreetmap.org/reverse?lat={lat}&lon={lon}&format=json"
    async with aiohttp.ClientSession() as session:
        async with session.get(url, headers={'User-Agent': 'Mozilla/5.0'}) as resp:
            if resp.status == 200:
                data = await resp.json()
                return data.get("display_name", "Noma'lum joy")
    return "Xatolik yuz berdi!"


def calculate_distance(lat1, lon1, lat2, lon2):
    return round(geodesic((lat1, lon1), (lat2, lon2)).km, 2)


def google_maps_directions_link(lat1, lon1, lat2, lon2):
    return f"https://www.google.com/maps/dir/?api=1&origin={lat1},{lon1}&destination={lat2},{lon2}"


@dp.message_handler(state=OrderState.product_photo, content_types=types.ContentType.PHOTO)
async def set_product_photo(msg: types.Message, state: FSMContext):
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f"http://127.0.0.1:8005/api/telegram-users/chat_id/{msg.from_user.id}/") as resp:
                if resp.status != 200:
                    await msg.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")
                    return
                tg_user = await resp.json()
                user_id = tg_user.get("id")

            photo_id = msg.photo[-1].file_id
            file_info = await msg.bot.get_file(photo_id)
            file_path = file_info.file_path
            photo_url = f"https://api.telegram.org/file/bot{Config.BOT_TOKEN}/{file_path}"

            async with session.get(photo_url) as photo_resp:
                if photo_resp.status != 200:
                    await msg.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–∞ Telegram!")
                    return
                image_bytes = await photo_resp.read()

            filename = f"{msg.from_user.id}_{photo_id}.jpg"
            saved_path = os.path.join("images", filename)

            with open(saved_path, "wb") as f:
                f.write(image_bytes)

            data = await state.get_data()

            pickup_lat = float(data.get('pickup_latitude', 0))
            pickup_lon = float(data.get('pickup_longitude', 0))
            delivery_lat = float(data.get('delivery_latitude', 0))
            delivery_lon = float(data.get('delivery_longitude', 0))

            pickup_address = await get_location_name(pickup_lat, pickup_lon)
            delivery_address = await get_location_name(delivery_lat, delivery_lon)

            distance_km = calculate_distance(pickup_lat, pickup_lon, delivery_lat, delivery_lon)

            directions_link = google_maps_directions_link(pickup_lat, pickup_lon, delivery_lat, delivery_lon)

            order_data = {
                "user": str(user_id),
                "pickup_latitude": str(pickup_lat),
                "pickup_longitude": str(pickup_lon),
                "pickup_address": pickup_address,
                "delivery_latitude": str(delivery_lat),
                "delivery_longitude": str(delivery_lon),
                "delivery_address": delivery_address,
                "distance_km": str(distance_km),
                "order_price": str(data.get('product_price', 0)),
                "delivery_price": str(data.get('delivery_price', 0)),
                "deliver_payment_by": "user" if data.get('delivery_payer') == "–∫–ª–∏–µ–Ω—Ç" else "customer",
                "payment_by": "user" if data.get('product_payer') == "–∫–ª–∏–µ–Ω—Ç" else "courier",
                "pickup_comment": data.get('pickup_comment', ""),
                "delivery_comment": data.get('delivery_comment', ""),
                "image": saved_path,
                "map": directions_link
            }

            async with session.post("http://127.0.0.1:8005/api/orders/orders/", json=order_data) as api_resp:
                if api_resp.status == 201:
                    response_data = await api_resp.json()
                    order_id = response_data.get("id")
                    await msg.answer(text="‚úÖ *–í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!*",
                                     reply_markup=await main_menu_buttons(msg.from_user.id), parse_mode="Markdown")
                    order_summary = (
                        f"üìç *–û—Ç–∫—É–¥–∞:* {pickup_address}\n"
                        f"üìç *–ö—É–¥–∞:* {delivery_address}\n"
                        f"üõ§ *–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ:* {distance_km} –∫–º\n"
                        f"üí∞ *–¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞:* {data.get('product_price', 0)} —Å—É–º\n"
                        f"üöö *–¶–µ–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∏:* {data.get('delivery_price', 0)} —Å—É–º\n"
                        f"üí≥ *–û–ø–ª–∞—Ç–∞ —Ç–æ–≤–∞—Ä–∞:* {data.get('product_payer')}\n"
                        f"üí≥ *–û–ø–ª–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏:* {data.get('delivery_payer')}\n"
                        f"üìù *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–±–æ—Ä—É:* {data.get('pickup_comment', '–ù–µ—Ç')}\n"
                        f"üìù *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –¥–æ—Å—Ç–∞–≤–∫–µ:* {data.get('delivery_comment', '–ù–µ—Ç')}\n"
                        f"üìû *–ö–æ–Ω—Ç–∞–∫—Ç:* {tg_user['phone_number']}"
                        f"üì∏ *–§–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞:*\n\n"
                        f"üó∫ *–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–∞—Ä—à—Ä—É—Ç:* [Google Maps]({directions_link})"
                    )
                    cancel_button = InlineKeyboardMarkup().add(
                        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f"cancel_order_{order_id}")
                    )
                    accept_button = InlineKeyboardMarkup().add(
                        InlineKeyboardButton("‚úÖ  –ü—Ä–∏–Ω—è—Ç–∏–µ", callback_data=f"accept_order_{order_id}")
                    )
                    await msg.answer_photo(photo=photo_id, caption=order_summary, parse_mode="Markdown",
                                           reply_markup=cancel_button)

                    couriers = json.loads(
                        requests.get(url=f"http://127.0.0.1:8005/api/telegram-users/couriers/").content)['results']
                    for courier in couriers:
                        if courier['is_available']:
                            await bot.send_photo(chat_id=courier['chat_id'], photo=photo_id, caption=order_summary,
                                                 parse_mode="Markdown",
                                                 reply_markup=accept_button)
                else:
                    await msg.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞! {await api_resp.text()}",
                                     reply_markup=await main_menu_buttons(msg.from_user.id))

    except Exception as e:
        await msg.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞!\n{str(e)}",
                         reply_markup=await main_menu_buttons(msg.from_user.id))

    await state.finish()


@dp.callback_query_handler(lambda call: call.data.startswith("cancel_order_"))
async def cancel_order(call: types.CallbackQuery):
    order_id = call.data.split("_")[-1]

    async with aiohttp.ClientSession() as session:
        async with session.post(f"http://127.0.0.1:8005/api/orders/orders/{order_id}/cancel/") as resp:
            if resp.status == 200:
                await call.message.delete()
                await call.message.answer("‚ùå –í–∞—à –∑–∞–∫–∞–∑ –±—ã–ª –æ—Ç–º–µ–Ω—ë–Ω!",
                                                reply_markup=await main_menu_buttons(call.from_user.id))
            else:
                await call.message.answer("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑!",
                                          reply_markup=await main_menu_buttons(call.from_user.id))


@dp.message_handler(state=OrderState.delivery_payer, content_types=ContentType.TEXT)
async def set_delivery_payer(msg: types.Message, state: FSMContext):
    if msg.text.lower() not in ["–∫–ª–∏–µ–Ω—Ç", "–∑–∞–∫–∞–∑—á–∏–∫"]:
        await msg.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ: –ö–ª–∏–µ–Ω—Ç –∏–ª–∏ –ó–∞–∫–∞–∑—á–∏–∫")
        return
    await state.update_data(delivery_payer=msg.text.lower())
    await msg.answer("üë§ –ö—Ç–æ –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç —Ç–æ–≤–∞—Ä? (–ö–ª–∏–µ–Ω—Ç / –ö—É—Ä—å–µ—Ä)", reply_markup=ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton("–ö–ª–∏–µ–Ω—Ç"), KeyboardButton("–ö—É—Ä—å–µ—Ä")], [cancel_button]],
        resize_keyboard=True
    ))
    await OrderState.product_payer.set()


@dp.message_handler(state=OrderState.product_payer, content_types=ContentType.TEXT)
async def set_product_payer(msg: types.Message, state: FSMContext):
    if msg.text.lower() not in ["–∫–ª–∏–µ–Ω—Ç", "–∫—É—Ä—å–µ—Ä"]:
        await msg.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ: –ö–ª–∏–µ–Ω—Ç –∏–ª–∏ –ö—É—Ä—å–µ—Ä")
        return
    await state.update_data(product_payer=msg.text.lower())

    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton("‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")], [cancel_button]], resize_keyboard=True
    )
    await msg.answer("‚úè –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Ç–æ—á–∫–µ A (–æ—Ç–∫—É–¥–∞ –∑–∞–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å.",
                     reply_markup=keyboard)
    await OrderState.pickup_comment.set()
